FORMAT: 1A

# Metrics API (Version 1)

Sample API to explore functionality of *Apiary* and *API Blueprints Spec*.

## Common Definitions

This section describe common concepts used in all API calls.

### MetricID Structure
`MetricID` – fully qualfied metric name, with all its tags, has the following format:

`Namespace`.`MetricName`.`[Name1:Value1]`.`[Name2:Value2]`. *...* .`[NameN:ValueN]` where,

* `Namespace` – prefix used to partition metrics space
* `MetricName` – name of the sensor that emits value
* `[NameN:ValueN]` – tag, used to de-dupe metric

# Group Storing & Retrieval of Datapoints

These API calls work with datapoints.
Full `MetricID` must be specified in every call.

## Datapoints API [/v1/datapoints]

### Publish Datapoints [POST]
Publish datapoints.

Data format:

**INPUT:**
- one
- two

**OUTOUT:**
- one

**ERRORS:**
- two


+ Parameters
    - INPUT (optional) ... Input Parametrs
    
    * value (required, double) ... Value of datapoints.
    * id (required, string) ... `MetricID` of datapoints.
    * timestamp (optional, number) ... Unix Timestamp of datapoint.
    
        If not present, the current time on the server will be used.
    
    - OUTPUT (optional) ... Output Parameters
    
    * status ... Status of posted datapoints
    
        + Values
            + `OK`
            + `FAIL`
            
    * metrics_created (required, boolean) ... Wether new metric was created for published datapoint 
    
    - ERRORS (optional) ... Errors

+ Request (application/json)

    [
        {
            "timestamp": 213,
            "value": 123,
            "id": "Namespace.MetricName$[d1:v1][d2:v2]"
        }
    ]

+ Response 200 (application/json)
    
    {
        "status": "OK",
        "metrics_created": false
    }
    
+ Response 500 (application/json)

    {
        "status": "FAIL"
    }

### Get Datapoints [POST]

+ Request (application/json)

    [
        "mid1"
    ]
    
+ Response 200 (application/json)

    {
        "mid1": { ... }
    }
